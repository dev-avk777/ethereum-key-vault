services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ethereum_key_vault
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./pg_hba.conf:/pg_hba.conf:ro
    command: >
      bash -c "cp /pg_hba.conf /var/lib/postgresql/data/pg_hba.conf && chown postgres:postgres /var/lib/postgresql/data/pg_hba.conf && docker-entrypoint.sh postgres"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  vault:
    image: hashicorp/vault:1.19.1
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dev-only-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_API_ADDR: http://vault:8200
      VAULT_ADDR: http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/file
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--header", "X-Vault-Token: dev-only-token", "http://127.0.0.1:8200/v1/sys/health"]
      interval: 5s
      timeout: 5s
      retries: 40
      start_period: 40s

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    ports:
      - "5000:5000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  vault_data:

networks:
  app-network:
    driver: bridge