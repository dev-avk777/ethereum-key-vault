diff --git a/src/services/substrate.service.ts b/src/services/substrate.service.ts
index 4a23c75..01e82c8 100644
--- a/src/services/substrate.service.ts
+++ b/src/services/substrate.service.ts
@@ -29,7 +29,7 @@ export class SubstrateService implements IWalletService, OnModuleInit {
     private readonly vaultService: VaultService
   ) {
     // Set the ss58Prefix from the config, defaulting to 42
-    this.ss58Prefix = this.configService.get<number>('SUBSTRATE_SS58_PREFIX') ?? 42
+    this.ss58Prefix = this.configService.get<number>('substrate.ss58Prefix') ?? 42
   }
 
   /**
@@ -37,10 +37,29 @@ export class SubstrateService implements IWalletService, OnModuleInit {
    * @returns {Promise<void>} A promise that resolves when the connection is established.
    */
   async onModuleInit() {
-    const url = this.configService.get<string>('SUBSTRATE_RPC_URL') || 'ws://127.0.0.1:9944'
+    const url = this.configService.get<string>('substrate.rpcUrl') || 'ws://127.0.0.1:9944'
     const provider = new WsProvider(url)
     this.api = await ApiPromise.create({ provider })
     this.logger.log(`Connected to Substrate node at ${url}`)
+
+    // Логгирование важных конфигурационных параметров
+    const tokenId = this.configService.get<string>('substrate.tokenId')
+    const useBalances = this.configService.get<boolean>('substrate.useBalances')
+    this.logger.log(`Substrate configuration: tokenId=${tokenId}, useBalances=${useBalances}`)
+
+    // Проверяем доступные методы трансфера
+    const hasTokensTransfer = !!this.api.tx.tokens?.transfer
+    const hasBalancesTransfer = !!this.api.tx.balances?.transfer
+    this.logger.log(
+      `Available transfer methods: tokens.transfer=${hasTokensTransfer}, balances.transfer=${hasBalancesTransfer}`
+    )
+
+    // Проверка наличия подходящих методов трансфера
+    if (!hasTokensTransfer && !hasBalancesTransfer) {
+      this.logger.warn(
+        'No suitable transfer methods found on this chain. Fungible token transfers may not work!'
+      )
+    }
   }
 
   /**
@@ -70,50 +89,99 @@ export class SubstrateService implements IWalletService, OnModuleInit {
 
       this.logger.log(`Generated Substrate wallet for user ${userId}: ${address}`)
       return { address, privateKey: mnemonic }
-    } catch (error) {
-      this.logger.error(`Failed to generate wallet for user ${userId}: ${error.message}`)
-      this.logger.error(`Error stack: ${error.stack}`)
+    } catch (error: unknown) {
+      const errorMessage = error instanceof Error ? error.message : String(error)
+      const errorStack = error instanceof Error ? error.stack : 'No stack trace available'
+
+      this.logger.error(`Failed to generate wallet for user ${userId}: ${errorMessage}`)
+      this.logger.error(`Error stack: ${errorStack}`)
       throw error // Перебрасываем ошибку для обработки на уровне выше
     }
   }
 
   /**
-   * Sends tokens using balances.transfer and waits for inclusion in a block.
+   * Sends tokens universally by selecting the appropriate extrinsic based on chain capability.
    * @param {string} userId - The ID of the user sending tokens.
    * @param {string} to - The recipient's address.
-   * @param {string} amount - The amount of tokens to send.
+   * @param {string} amount - The amount of tokens to send (in human readable format).
+   * @param {string} assetIdOverride - Optional asset ID override for ORML tokens.
    * @returns {Promise<{ hash: string }>} A promise that resolves to an object containing the transaction hash.
    * @throws {BadRequestException} If there is no privateKey in Vault for the user or if the transfer fails.
+   * @throws {InternalServerErrorException} If no suitable transfer method is found on the chain.
    */
-  async sendTokens(userId: string, to: string, amount: string): Promise<{ hash: string }> {
+  async sendTokens(
+    userId: string,
+    to: string,
+    amount: string,
+    assetIdOverride?: string
+  ): Promise<{ hash: string }> {
     if (!this.api) {
       await this.onModuleInit()
     }
 
+    // 1) Достанем приватный ключ
     const secret = await this.vaultService.getSecret(`substrate/${userId}`)
     if (!secret?.privateKey) {
       throw new BadRequestException(`No private key for user ${userId}`)
     }
+    const pair = new Keyring({ type: 'sr25519' }).addFromUri(secret.privateKey)
 
-    const keyring = new Keyring({ type: 'sr25519' })
-    const pair = keyring.addFromUri(secret.privateKey)
+    // 2) Конвертируем amount в планки
     const amountPlanck = parseBalance(this.api, amount)
-    this.logger.debug(`Has api.tx.unique.transfer? ${!!this.api.tx.unique?.transfer}`)
+
+    // 3) Выбираем extrinsic
+    let tx
+    const assetId = assetIdOverride ?? this.configService.get<string>('substrate.tokenId')
+    const useBalances = this.configService.get<boolean>('substrate.useBalances')
+
     this.logger.debug(`Has api.tx.tokens.transfer? ${!!this.api.tx.tokens?.transfer}`)
     this.logger.debug(`Has api.tx.balances.transfer? ${!!this.api.tx.balances?.transfer}`)
-    let tx
-    if (this.api.tx.unique?.transfer) {
+    this.logger.debug(`Has api.tx.unique.transfer? ${!!this.api.tx.unique?.transfer}`)
+    this.logger.debug(`Config useBalances: ${useBalances}`)
+    this.logger.debug(`Using asset ID: ${assetId}`)
+
+    // A) ORML-tokens (если доступны и useBalances=false)
+    if (this.api.tx.tokens?.transfer && !useBalances) {
+      this.logger.debug(`Using tokens.transfer for asset ${assetId}`)
+      tx = this.api.tx.tokens.transfer(assetId, to, amountPlanck)
+
+      // B) Классический balances
+    } else if (this.api.tx.balances?.transfer) {
+      this.logger.debug(`Using balances.transfer`)
+      tx = this.api.tx.balances.transfer(to, amountPlanck)
+
+      // C) Для сети Unique Network используем unique.transfer с правильными аргументами
+    } else if (this.api.tx.unique?.transfer) {
       const argNames = this.api.tx.unique.transfer.meta.args.map(arg => arg.name.toString())
       this.logger.debug(`unique.transfer expects args: [${argNames.join(', ')}]`)
-      // если у вас кастомная паллета unique:
-      tx = this.api.tx.unique.transfer(to, amountPlanck)
-    } else if (this.api.tx.tokens?.transfer) {
-      // ORML-паллета tokens: первый аргумент — идентификатор валюты, чаще всего строка "OPAL"
-      tx = this.api.tx.tokens.transfer('OPAL', to, amountPlanck)
+      this.logger.debug(`Using unique.transfer for Unique Network`)
+
+      // Уникальная сеть ожидает 4 аргумента: recipient, collectionId, itemId, value
+      // Для передачи основной валюты (OPAL) используем нулевые значения для коллекций
+      try {
+        // Получаем коллекцию по умолчанию - обычно 0 для нативных токенов
+        const collectionId = 0
+        const itemId = 0 // Обычно 0 для нативных токенов
+
+        this.logger.debug(
+          `unique.transfer with args: recipient=${to}, collectionId=${collectionId}, itemId=${itemId}, value=${amountPlanck}`
+        )
+        tx = this.api.tx.unique.transfer(to, collectionId, itemId, amountPlanck)
+      } catch (error: unknown) {
+        const errorMessage = error instanceof Error ? error.message : String(error)
+        this.logger.error(`Failed to create unique.transfer transaction: ${errorMessage}`)
+        throw new BadRequestException(`Error creating transaction: ${errorMessage}`)
+      }
+
+      // D) Нет подходящих методов трансфера
     } else {
-      throw new InternalServerErrorException('No suitable transfer method found on this chain')
+      this.logger.error(`No suitable transfer method found on this chain`)
+      throw new InternalServerErrorException(
+        'No suitable fungible transfer method found on this chain. Please check if tokens.transfer or balances.transfer are available.'
+      )
     }
 
+    // 4) Отправляем
     return new Promise((resolve, reject) => {
       tx.signAndSend(pair, ({ status, dispatchError, txHash }) => {
         if (dispatchError) {
