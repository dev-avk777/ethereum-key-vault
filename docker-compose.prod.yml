version: "3.8"

services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your-secure-postgres-password
      POSTGRES_DB: ethereum_key_vault
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./pg_hba.conf:/pg_hba.conf:ro
    command: >
      bash -c "cp /pg_hba.conf /var/lib/postgresql/data/pg_hba.conf \
        && chown postgres:postgres /var/lib/postgresql/data/pg_hba.conf \
        && docker-entrypoint.sh postgres"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - app-network

  vault:
    image: hashicorp/vault:1.19.1
    container_name: vault
    cap_add: [IPC_LOCK]
    ports:
      - "8200:8200"
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
    volumes:
      - vault_data:/vault/data
      - ./vault/config/prod.hcl:/vault/config/prod.hcl:ro
    command: vault server -config=/vault/config/prod.hcl
    healthcheck:
      test: ["CMD-SHELL", "vault status -address=${VAULT_ADDR}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    networks:
      - app-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    ports:
      - "5000:5000"
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ../oauth-frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "80:80"
    env_file:
      - ../oauth-frontend/.env.production
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  vault_data:

networks:
  app-network:
    driver: bridge
