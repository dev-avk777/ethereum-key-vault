name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: production-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE: registry.gitlab.com/store_images/docker-images/ethereum-key-vault

jobs:
  build:
    name: Build & Push Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 10.8.1

      - name: Cache PNPM store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install & Build
        run: |
          pnpm install
          pnpm lint
          pnpm build

      - name: Login to GitLab Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_USER }}
          password: ${{ secrets.GITLAB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}
          build-args: |
            NODE_ENV=production

    outputs:
      image_ref: ${{ env.IMAGE }}:${{ github.sha }}

  deploy:
    name: Deploy to Server
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Create env file content
        id: env-file
        run: |
          cat << 'EOF' > env.txt
          NODE_ENV=production
          PORT=5000
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}

          # PostgreSQL
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}

          # Vault
          VAULT_ENDPOINT=${{ secrets.VAULT_ENDPOINT }}
          VAULT_TOKEN=${{ secrets.VAULT_TOKEN }}

          # JWT & OAuth
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}

          # Frontend URLs
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          VITE_AUTH_API_URL=${{ secrets.VITE_AUTH_API_URL }}

          # Blockchain RPC
          ETHEREUM_RPC_URL=${{ secrets.ETHEREUM_RPC_URL }}
          SUBSTRATE_RPC_URL=${{ secrets.SUBSTRATE_RPC_URL }}
          SUBSTRATE_SS58_PREFIX=${{ secrets.SUBSTRATE_SS58_PREFIX }}
          EOF
          ENV_CONTENT=$(cat env.txt)
          echo "env_content<<EOF" >> $GITHUB_ENV
          echo "$ENV_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Deploy application over SSH
        run: |
          ssh -o StrictHostKeyChecking=no -p 22 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
            set -e
            cd ~/backend-ethereum-key-vault

            # Backup old .env.production and create a new one
            mv .env.production .env.production.bak 2>/dev/null || true
            echo '${{ env.env_content }}' > .env.production

            # Login to Registry and pull latest images
            docker login -u ${{ secrets.GITLAB_USER }} -p ${{ secrets.GITLAB_TOKEN }} registry.gitlab.com
            docker-compose -f docker-compose.backend-ethereum-key-vault.yml pull backend-postgres backend-ethereum-key-vault

            # Start or update services
            docker-compose -f docker-compose.backend-ethereum-key-vault.yml up -d

            # Verify status
            docker-compose -f docker-compose.backend-ethereum-key-vault.yml ps
          ENDSSH
